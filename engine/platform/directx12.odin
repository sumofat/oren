package platform
import "core:fmt"
import "core:c"
import fmj "../fmj"

import windows "core:sys/windows"
import window32 "core:sys/win32"

CompatibilityProfile :: struct
{
    level : c.int,
};

RenderDevice :: struct
{
    device : rawptr,
    device_context : rawptr,
    max_render_targets : u32,//GRAPHICS_MAX_RENDER_TARGETS;
    profile : CompatibilityProfile, 
    //TODO(Ray):- newArgumentEncoderWithArguments:
    //Creates a new argument encoder for a specific array of arguments.
    //Required.
    //ArgumentBuffersTier argument_buffers_support;
    //This limit is only applicable to samplers that have their supportArgumentBuffers property set to YES.
    max_argument_buffer_sampler_count : u32,
};

CreateDeviceResult :: struct
{
    is_init : bool,
    compatible_level : c.int,
    dim : fmj.f2,
    device : RenderDevice
};

UploadOperations :: struct
{
    count : u64,
    table_cache : fmj.AnyCache,
    ticket_mutex : fmj.FMJTicketMutex,
    current_op_id : u64,
    fence_value : u64,
    fence : rawptr,//ID3D12Fence*,
    fence_event : window32.Handle,
};

D3D12_CPU_DESCRIPTOR_HANDLE :: struct
{
    ptr : ^u64
}

D3D12_VERTEX_BUFFER_VIEW :: struct
{
    BufferLocation : u64,//D3D12_GPU_VIRTUAL_ADDRESS,
    SizeInBytes : c.uint,
    StrideInBytes : c.uint,
};

D3D12_INPUT_ELEMENT_DESC :: struct
{
    SemanticName : cstring,//char* typedefed to LPCSTR
    SemanticIndex : c.uint,
    Format : DXGI_FORMAT,
    InputSlot : c.uint,
    AlignedByteOffset : c.uint,
    InputSlotClass : D3D12_INPUT_CLASSIFICATION,
    InstanceDataStepRate : c.uint,
};

//typedef D3D_PRIMITIVE_TOPOLOGY D3D12_PRIMITIVE_TOPOLOGY;
D3D12_PRIMITIVE_TOPOLOGY :: enum u32
{
    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
    D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED,
    D3D10_PRIMITIVE_TOPOLOGY_POINTLIST,
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST,
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED,
    D3D11_PRIMITIVE_TOPOLOGY_POINTLIST,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
};

D3D12_PRIMITIVE_TOPOLOGY_TYPE :: enum u32
{
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED	= 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT	= 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE	= 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE	= 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH	= 4
};

D3D12_INPUT_CLASSIFICATION :: enum u32
{
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA	= 0,
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA	= 1
};

DXGI_FORMAT :: enum u32
{
    DXGI_FORMAT_UNKNOWN	                    = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS       = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT          = 2,
    DXGI_FORMAT_R32G32B32A32_UINT           = 3,
    DXGI_FORMAT_R32G32B32A32_SINT           = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS          = 5,
    DXGI_FORMAT_R32G32B32_FLOAT             = 6,
    DXGI_FORMAT_R32G32B32_UINT              = 7,
    DXGI_FORMAT_R32G32B32_SINT              = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS       = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT          = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM          = 11,
    DXGI_FORMAT_R16G16B16A16_UINT           = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM          = 13,
    DXGI_FORMAT_R16G16B16A16_SINT           = 14,
    DXGI_FORMAT_R32G32_TYPELESS             = 15,
    DXGI_FORMAT_R32G32_FLOAT                = 16,
    DXGI_FORMAT_R32G32_UINT                 = 17,
    DXGI_FORMAT_R32G32_SINT                 = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS           = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT        = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS    = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT     = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS        = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM           = 24,
    DXGI_FORMAT_R10G10B10A2_UINT            = 25,
    DXGI_FORMAT_R11G11B10_FLOAT             = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS           = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM              = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB         = 29,
    DXGI_FORMAT_R8G8B8A8_UINT               = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM              = 31,
    DXGI_FORMAT_R8G8B8A8_SINT               = 32,
    DXGI_FORMAT_R16G16_TYPELESS             = 33,
    DXGI_FORMAT_R16G16_FLOAT                = 34,
    DXGI_FORMAT_R16G16_UNORM                = 35,
    DXGI_FORMAT_R16G16_UINT                 = 36,
    DXGI_FORMAT_R16G16_SNORM                = 37,
    DXGI_FORMAT_R16G16_SINT                 = 38,
    DXGI_FORMAT_R32_TYPELESS                = 39,
    DXGI_FORMAT_D32_FLOAT                   = 40,
    DXGI_FORMAT_R32_FLOAT                   = 41,
    DXGI_FORMAT_R32_UINT                    = 42,
    DXGI_FORMAT_R32_SINT                    = 43,
    DXGI_FORMAT_R24G8_TYPELESS              = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT           = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS       = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT        = 47,
    DXGI_FORMAT_R8G8_TYPELESS               = 48,
    DXGI_FORMAT_R8G8_UNORM                  = 49,
    DXGI_FORMAT_R8G8_UINT                   = 50,
    DXGI_FORMAT_R8G8_SNORM                  = 51,
    DXGI_FORMAT_R8G8_SINT                   = 52,
    DXGI_FORMAT_R16_TYPELESS                = 53,
    DXGI_FORMAT_R16_FLOAT                   = 54,
    DXGI_FORMAT_D16_UNORM                   = 55,
    DXGI_FORMAT_R16_UNORM                   = 56,
    DXGI_FORMAT_R16_UINT                    = 57,
    DXGI_FORMAT_R16_SNORM                   = 58,
    DXGI_FORMAT_R16_SINT                    = 59,
    DXGI_FORMAT_R8_TYPELESS                 = 60,
    DXGI_FORMAT_R8_UNORM                    = 61,
    DXGI_FORMAT_R8_UINT                     = 62,
    DXGI_FORMAT_R8_SNORM                    = 63,
    DXGI_FORMAT_R8_SINT                     = 64,
    DXGI_FORMAT_A8_UNORM                    = 65,
    DXGI_FORMAT_R1_UNORM                    = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP          = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM             = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM             = 69,
    DXGI_FORMAT_BC1_TYPELESS                = 70,
    DXGI_FORMAT_BC1_UNORM                   = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB              = 72,
    DXGI_FORMAT_BC2_TYPELESS                = 73,
    DXGI_FORMAT_BC2_UNORM                   = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB              = 75,
    DXGI_FORMAT_BC3_TYPELESS                = 76,
    DXGI_FORMAT_BC3_UNORM                   = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB              = 78,
    DXGI_FORMAT_BC4_TYPELESS                = 79,
    DXGI_FORMAT_BC4_UNORM                   = 80,
    DXGI_FORMAT_BC4_SNORM                   = 81,
    DXGI_FORMAT_BC5_TYPELESS                = 82,
    DXGI_FORMAT_BC5_UNORM                   = 83,
    DXGI_FORMAT_BC5_SNORM                   = 84,
    DXGI_FORMAT_B5G6R5_UNORM                = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM              = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM              = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM              = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM  = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS           = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB         = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS           = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB         = 93,
    DXGI_FORMAT_BC6H_TYPELESS               = 94,
    DXGI_FORMAT_BC6H_UF16                   = 95,
    DXGI_FORMAT_BC6H_SF16                   = 96,
    DXGI_FORMAT_BC7_TYPELESS                = 97,
    DXGI_FORMAT_BC7_UNORM                   = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB              = 99,
    DXGI_FORMAT_AYUV                        = 100,
    DXGI_FORMAT_Y410                        = 101,
    DXGI_FORMAT_Y416                        = 102,
    DXGI_FORMAT_NV12                        = 103,
    DXGI_FORMAT_P010                        = 104,
    DXGI_FORMAT_P016                        = 105,
    DXGI_FORMAT_420_OPAQUE                  = 106,
    DXGI_FORMAT_YUY2                        = 107,
    DXGI_FORMAT_Y210                        = 108,
    DXGI_FORMAT_Y216                        = 109,
    DXGI_FORMAT_NV11                        = 110,
    DXGI_FORMAT_AI44                        = 111,
    DXGI_FORMAT_IA44                        = 112,
    DXGI_FORMAT_P8                          = 113,
    DXGI_FORMAT_A8P8                        = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM              = 115,

    DXGI_FORMAT_P208                        = 130,
    DXGI_FORMAT_V208                        = 131,
    DXGI_FORMAT_V408                        = 132,


    DXGI_FORMAT_FORCE_UINT                  = 0xffffffff
};

//Commands
CommandType :: enum u32
{
    CommandType_StartCommandList,
    CommandType_EndCommandList,
    CommandType_Draw,
    CommandType_DrawIndexed,
    CommandType_Viewport,
    CommandType_PipelineState,
    CommandType_RootSignature,
    CommandType_ScissorRect,
    CommandType_GraphicsRootDescTable,
    CommandType_GraphicsRootConstant,
    CommandType_SetVertexBuffer    
};

D3D12_INDEX_BUFFER_VIEW :: struct
{
    BufferLocation : u64,
    SizeInBytes : c.uint,
    Format : DXGI_FORMAT,
};

GPUMemoryResult :: struct
{
    Budget : u64,
    CurrentUsage : u64,
    AvailableForReservation : u64,
    CurrentReservation : u64,
};

D3D12_SHADER_BYTECODE :: struct
{
    pShaderBytecode : rawptr,
    //NOTE(Ray)://SIZE_T Can be found here in odin_lang https://github.com/odin-lang/Odin/blob/1eb1bffd89064add5828b3351289417ed28e332c/core/sys/windows/types.odin#L32
    BytecodeLength : uint,//typedef ULONG_PTR SIZE_T//unsigned __int3264 ULONG_PTR
};

D3D12_PIPELINE_STATE_STREAM_DESC ::struct
{
    SizeInBytes : u64,//SIZE_T,
    pPipelineStateSubobjectStream : rawptr,//void*
};

D3D12_INPUT_LAYOUT_DESC ::struct
{
    input_element_desc : ^D3D12_INPUT_ELEMENT_DESC,
    NumElements : c.uint,
};

D3D12_PIPELINE_STATE_SUBOBJECT_TYPE :: enum u32
{
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE	= 0,

    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING + 1 ) 
};
/*
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE :: enum u32
{
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID
};
*/
PipelineStateSubObject :: struct(inner_type : typeid) #align align_of(rawptr)
{
    type : D3D12_PIPELINE_STATE_SUBOBJECT_TYPE,
    value : inner_type
};

PipelineRasterizerStateSubObject :: struct #align align_of(rawptr)
{
    type : D3D12_PIPELINE_STATE_SUBOBJECT_TYPE,    
    value : D3D12_RASTERIZER_DESC,
};

PipelineRasterizerStateSubObjectTest :: struct #align align_of(rawptr)
{
    type : D3D12_PIPELINE_STATE_SUBOBJECT_TYPE,
    value : D3D12_RASTERIZER_DESC,    
};

PipelineStateStream :: struct 
{

    root_sig : PipelineStateSubObject(/*ID3D12RootSignature*/rawptr),
    input_layout : PipelineStateSubObject(D3D12_INPUT_LAYOUT_DESC),
    topology_type : PipelineStateSubObject(D3D12_PRIMITIVE_TOPOLOGY_TYPE),
    vertex_shader : PipelineStateSubObject(D3D12_SHADER_BYTECODE),
    fragment_shader : PipelineStateSubObject(D3D12_SHADER_BYTECODE),
    dsv_format : PipelineStateSubObject(DXGI_FORMAT),
    rtv_formats : PipelineStateSubObject(D3D12_RT_FORMAT_ARRAY),

    rasterizer_state : PipelineStateSubObject(D3D12_RASTERIZER_DESC),

    blend_state : PipelineStateSubObject(D3D12_BLEND_DESC),    
    depth_stencil_state : PipelineStateSubObject(D3D12_DEPTH_STENCIL_DESC1),                
};

D3D12_RT_FORMAT_ARRAY :: struct
{
    RTFormats : [8] DXGI_FORMAT,
    NumRenderTargets : windows.UINT,
};

D3D12_DEPTH_WRITE_MASK :: enum u32
{
    D3D12_DEPTH_WRITE_MASK_ZERO	= 0,
    D3D12_DEPTH_WRITE_MASK_ALL	= 1
};


D3D12_COMPARISON_FUNC :: enum u32
    {
        D3D12_COMPARISON_FUNC_NEVER	= 1,
        D3D12_COMPARISON_FUNC_LESS	= 2,
        D3D12_COMPARISON_FUNC_EQUAL	= 3,
        D3D12_COMPARISON_FUNC_LESS_EQUAL	= 4,
        D3D12_COMPARISON_FUNC_GREATER	= 5,
        D3D12_COMPARISON_FUNC_NOT_EQUAL	= 6,
        D3D12_COMPARISON_FUNC_GREATER_EQUAL	= 7,
        D3D12_COMPARISON_FUNC_ALWAYS	= 8
    };

DEFAULT_D3D12_STENCIL_READ_MASK :: 0xff;
DEFAULT_D3D12_STENCIL_WRITE_MASK :: 0xff;

D3D12_STENCIL_OP :: enum u32
    {
        D3D12_STENCIL_OP_KEEP	= 1,
        D3D12_STENCIL_OP_ZERO	= 2,
        D3D12_STENCIL_OP_REPLACE	= 3,
        D3D12_STENCIL_OP_INCR_SAT	= 4,
        D3D12_STENCIL_OP_DECR_SAT	= 5,
        D3D12_STENCIL_OP_INVERT	= 6,
        D3D12_STENCIL_OP_INCR	= 7,
        D3D12_STENCIL_OP_DECR	= 8
    };

D3D12_DEPTH_STENCILOP_DESC :: struct
{
    StencilFailOp : D3D12_STENCIL_OP,
    StencilDepthFailOp : D3D12_STENCIL_OP,
    StencilPassOp : D3D12_STENCIL_OP,
    StencilFunc : D3D12_COMPARISON_FUNC
};
DEFAULT_D3D12_DEPTH_STENCILOP_DESC :: D3D12_DEPTH_STENCILOP_DESC{.D3D12_STENCIL_OP_KEEP, .D3D12_STENCIL_OP_KEEP, .D3D12_STENCIL_OP_KEEP,   .D3D12_COMPARISON_FUNC_ALWAYS};

D3D12_DEPTH_STENCIL_DESC :: struct
{
    DepthEnable : windows.BOOL,
    DepthWriteMask : D3D12_DEPTH_WRITE_MASK,
    DepthFunc : D3D12_COMPARISON_FUNC,     
    StencilEnable : windows.BOOL,
    StencilReadMask : u8,//UINT8 / char
    StencilWriteMask : u8,//UINT8 / char
    FrontFace : D3D12_DEPTH_STENCILOP_DESC,
    BackFace : D3D12_DEPTH_STENCILOP_DESC, 
};

D3D12_DEPTH_STENCIL_DESC1 :: struct
{
    DepthEnable : windows.BOOL,
    DepthWriteMask : D3D12_DEPTH_WRITE_MASK,
    DepthFunc : D3D12_COMPARISON_FUNC,     
    StencilEnable : windows.BOOL,
    StencilReadMask : u8,//UINT8 / char
    StencilWriteMask : u8,//UINT8 / char
    FrontFace : D3D12_DEPTH_STENCILOP_DESC,
    BackFace : D3D12_DEPTH_STENCILOP_DESC,
    DepthBoundsTestEnable : windows.BOOL,
};

DEFAULT_D3D12_DEPTH_STENCIL_DESC1 :: D3D12_DEPTH_STENCIL_DESC1{true, .D3D12_DEPTH_WRITE_MASK_ALL, .D3D12_COMPARISON_FUNC_LESS, false, DEFAULT_D3D12_STENCIL_READ_MASK,DEFAULT_D3D12_STENCIL_WRITE_MASK, DEFAULT_D3D12_DEPTH_STENCILOP_DESC,DEFAULT_D3D12_DEPTH_STENCILOP_DESC, false};

D3D12_FILL_MODE :: enum u32
{
    D3D12_FILL_MODE_WIREFRAME	= 2,
    D3D12_FILL_MODE_SOLID	= 3
};

D3D12_CULL_MODE :: enum u32
{
    D3D12_CULL_MODE_NONE	= 1,
    D3D12_CULL_MODE_FRONT	= 2,
    D3D12_CULL_MODE_BACK	= 3
};

D3D12_CONSERVATIVE_RASTERIZATION_MODE :: enum u32
{
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF	= 0,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON	= 1
};

D3D12_RASTERIZER_DESC :: struct
{
    FillMode : D3D12_FILL_MODE,
    CullMode : D3D12_CULL_MODE,
    FrontCounterClockwise : windows.BOOL,
    DepthBias : c.int,
    DepthBiasClamp : f32,
    SlopeScaledDepthBias : f32,
    DepthClipEnable : windows.BOOL,
    MultisampleEnable : windows.BOOL,
    AntialiasedLineEnable : windows.BOOL,
    ForcedSampleCount : windows.UINT,
    ConservativeRaster : D3D12_CONSERVATIVE_RASTERIZATION_MODE,
};

DEFAULT_D3D12_RASTERIZER_DESC :: D3D12_RASTERIZER_DESC{ .D3D12_FILL_MODE_SOLID, .D3D12_CULL_MODE_BACK, false, 0, 0.0, 0.0, true, false, false, 0, .D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF};

D3D12_BLEND :: enum u32
{
    D3D12_BLEND_ZERO	= 1,
    D3D12_BLEND_ONE	= 2,
    D3D12_BLEND_SRC_COLOR	= 3,
    D3D12_BLEND_INV_SRC_COLOR	= 4,
    D3D12_BLEND_SRC_ALPHA	= 5,
    D3D12_BLEND_INV_SRC_ALPHA	= 6,
    D3D12_BLEND_DEST_ALPHA	= 7,
    D3D12_BLEND_INV_DEST_ALPHA	= 8,
    D3D12_BLEND_DEST_COLOR	= 9,
    D3D12_BLEND_INV_DEST_COLOR	= 10,
    D3D12_BLEND_SRC_ALPHA_SAT	= 11,
    D3D12_BLEND_BLEND_FACTOR	= 14,
    D3D12_BLEND_INV_BLEND_FACTOR	= 15,
    D3D12_BLEND_SRC1_COLOR	= 16,
    D3D12_BLEND_INV_SRC1_COLOR	= 17,
    D3D12_BLEND_SRC1_ALPHA	= 18,
    D3D12_BLEND_INV_SRC1_ALPHA	= 19
};

D3D12_BLEND_OP :: enum u32
{
    D3D12_BLEND_OP_ADD	= 1,
    D3D12_BLEND_OP_SUBTRACT	= 2,
    D3D12_BLEND_OP_REV_SUBTRACT	= 3,
    D3D12_BLEND_OP_MIN	= 4,
    D3D12_BLEND_OP_MAX	= 5
};

D3D12_LOGIC_OP :: enum u32
{
    D3D12_LOGIC_OP_CLEAR	= 0,
    D3D12_LOGIC_OP_SET	= ( D3D12_LOGIC_OP_CLEAR + 1 ) ,
    D3D12_LOGIC_OP_COPY	= ( D3D12_LOGIC_OP_SET + 1 ) ,
    D3D12_LOGIC_OP_COPY_INVERTED	= ( D3D12_LOGIC_OP_COPY + 1 ) ,
    D3D12_LOGIC_OP_NOOP	= ( D3D12_LOGIC_OP_COPY_INVERTED + 1 ) ,
    D3D12_LOGIC_OP_INVERT	= ( D3D12_LOGIC_OP_NOOP + 1 ) ,
    D3D12_LOGIC_OP_AND	= ( D3D12_LOGIC_OP_INVERT + 1 ) ,
    D3D12_LOGIC_OP_NAND	= ( D3D12_LOGIC_OP_AND + 1 ) ,
    D3D12_LOGIC_OP_OR	= ( D3D12_LOGIC_OP_NAND + 1 ) ,
    D3D12_LOGIC_OP_NOR	= ( D3D12_LOGIC_OP_OR + 1 ) ,
    D3D12_LOGIC_OP_XOR	= ( D3D12_LOGIC_OP_NOR + 1 ) ,
    D3D12_LOGIC_OP_EQUIV	= ( D3D12_LOGIC_OP_XOR + 1 ) ,
    D3D12_LOGIC_OP_AND_REVERSE	= ( D3D12_LOGIC_OP_EQUIV + 1 ) ,
    D3D12_LOGIC_OP_AND_INVERTED	= ( D3D12_LOGIC_OP_AND_REVERSE + 1 ) ,
    D3D12_LOGIC_OP_OR_REVERSE	= ( D3D12_LOGIC_OP_AND_INVERTED + 1 ) ,
    D3D12_LOGIC_OP_OR_INVERTED	= ( D3D12_LOGIC_OP_OR_REVERSE + 1 ) 
};

D3D12_COLOR_WRITE_ENABLE :: enum u32
    {
        D3D12_COLOR_WRITE_ENABLE_RED	= 1,
        D3D12_COLOR_WRITE_ENABLE_GREEN	= 2,
        D3D12_COLOR_WRITE_ENABLE_BLUE	= 4,
        D3D12_COLOR_WRITE_ENABLE_ALPHA	= 8,
        D3D12_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN )  | D3D12_COLOR_WRITE_ENABLE_BLUE )  | D3D12_COLOR_WRITE_ENABLE_ALPHA ) 
    };

D3D12_RENDER_TARGET_BLEND_DESC :: struct
{
    BlendEnable : windows.BOOL,
    LogicOpEnable : windows.BOOL,
    SrcBlend : D3D12_BLEND,
    DestBlend : D3D12_BLEND,
    BlendOp : D3D12_BLEND_OP,
    SrcBlendAlpha : D3D12_BLEND,
    DestBlendAlpha : D3D12_BLEND,
    BlendOpAlpha : D3D12_BLEND_OP,
    LogicOp : D3D12_LOGIC_OP,
    RenderTargetWriteMask : D3D12_COLOR_WRITE_ENABLE, //UINT8 // char;
};

DEFAULT_D3D12_RENDER_TARGET_BLEND_DESC :: D3D12_RENDER_TARGET_BLEND_DESC{false, false, .D3D12_BLEND_ONE, .D3D12_BLEND_ZERO, .D3D12_BLEND_OP_ADD, .D3D12_BLEND_ONE, .D3D12_BLEND_ZERO, .D3D12_BLEND_OP_ADD, .D3D12_LOGIC_OP_NOOP, .D3D12_COLOR_WRITE_ENABLE_ALL};

D3D12_BLEND_DESC :: struct
{
    AlphaToCoverageEnable : windows.BOOL,
    IndependentBlendEnable : windows.BOOL,
    RenderTarget : [8]D3D12_RENDER_TARGET_BLEND_DESC,
};

execute_frame :: proc()
{

    upload_operations : UploadOperations;

    fmj.fmj_thread_begin_ticket_mutex(&upload_operations.ticket_mutex);
    current_backbuffer_index := GetCurrentBackBufferIndex();
/*    
    if(is_resource_cl_recording)
    {
        resource_cl->Close();
        is_resource_cl_recording = false;
    }
*/

/*        
    CD3DX12_CPU_DESCRIPTOR_HANDLE rtv(D12RendererCode::rtv_descriptor_heap->GetCPUDescriptorHandleForHeapStart(),
                                          current_backbuffer_index, D12RendererCode::rtv_desc_size);
    

        D3D12_CPU_DESCRIPTOR_HANDLE dsv_cpu_handle = dsv_heap->GetCPUDescriptorHandleForHeapStart();
        
        CD3DX12_CPU_DESCRIPTOR_HANDLE rtv_cpu_handle = CD3DX12_CPU_DESCRIPTOR_HANDLE(rtv_descriptor_heap->GetCPUDescriptorHandleForHeapStart(),
                                                                                     current_backbuffer_index, rtv_desc_size);
        
        //D12Present the current framebuffer
        //Commandbuffer
        D12CommandAllocatorEntry* allocator_entry = D12RendererCode::GetFreeCommandAllocatorEntry(D3D12_COMMAND_LIST_TYPE_DIRECT);
        
        D12CommandListEntry command_list = GetAssociatedCommandList(allocator_entry);
        
        //Graphics
        
        ID3D12Resource* back_buffer = D12RendererCode::GetCurrentBackBuffer();
        
        bool fc = IsFenceComplete(fence,allocator_entry->fence_value);
        
        ASSERT(fc);
        allocator_entry->allocator->Reset();
        
        command_list.list->Reset(allocator_entry->allocator, nullptr);
        
        // Clear the render target.
        TransitionResource(command_list,back_buffer,D3D12_RESOURCE_STATE_PRESENT,D3D12_RESOURCE_STATE_RENDER_TARGET);
        
        FLOAT clearColor[] = { 0.4f, 0.6f, 0.9f, 1.0f };
        
        command_list.list->ClearRenderTargetView(rtv, clearColor, 0, nullptr);
        command_list.list->ClearDepthStencilView(dsv_cpu_handle, D3D12_CLEAR_FLAG_DEPTH, 1.0f, 0, 0, nullptr);
        
        //finish up
        EndCommandListEncodingAndExecute(allocator_entry,command_list);
        //insert signal in queue to so we know when we have executed up to this point. 
        //which in this case is up to the command clear and tranition back to present transition 
        //for back buffer.
        allocator_entry->fence_value = D12RendererCode::Signal(command_queue, fence, fence_value);
        
        D12RendererCode::WaitForFenceValue(fence, allocator_entry->fence_value, fence_event);
*/    
    fmj.fmj_thread_end_ticket_mutex(&upload_operations.ticket_mutex);

}
