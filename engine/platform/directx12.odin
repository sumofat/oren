package platform

import "core:fmt"
import "core:c"
import fmj "../fmj"

import windows "core:sys/windows"
import window32 "core:sys/win32"

import con "../containers"

UINT :: c.uint;
UINT64 :: u64;
UINT16 :: u16;
UINT8 :: u8;
FLOAT :: f32;
D3D12_GPU_VIRTUAL_ADDRESS :: UINT64;

D3D12_FLOAT32_MAX : f32 : 3.402823466e+38;

D3D12_RECT :: window32.Rect;

CompatibilityProfile :: struct{
    level : c.int,
};

D3D12_VIEWPORT :: struct{
    TopLeftX : FLOAT,
    TopLeftY : FLOAT,
    Width : FLOAT ,
    Height : FLOAT,
    MinDepth : FLOAT,
    MaxDepth : FLOAT,
};

D3D12_ROOT_DESCRIPTOR_TABLE1 :: struct{
    NumDescriptorRanges : windows.UINT,
    //    _Field_size_full_(NumDescriptorRanges)  const D3D12_DESCRIPTOR_RANGE1 *pDescriptorRanges;
    pDescriptorRanges : ^D3D12_DESCRIPTOR_RANGE1,
};

D3D12_ROOT_SIGNATURE_FLAGS :: enum u32{
    D3D12_ROOT_SIGNATURE_FLAG_NONE	= 0,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT	= 0x1,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS	= 0x2,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS	= 0x4,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS	= 0x8,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS	= 0x10,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS	= 0x20,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT	= 0x40,
    D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE	= 0x80,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS	= 0x100,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS	= 0x200,
    D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED	= 0x400,
    D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED	= 0x800,
};

D3D12_DESCRIPTOR_RANGE_TYPE :: enum u32{
    D3D12_DESCRIPTOR_RANGE_TYPE_SRV	= 0,
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV	= ( D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1 ) ,
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV	= ( D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1 ) ,
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER	= ( D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1 ),
};

D3D12_DESCRIPTOR_RANGE_FLAGS :: enum u32{
    D3D12_DESCRIPTOR_RANGE_FLAG_NONE	= 0,
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE	= 0x1,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE	= 0x2,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE	= 0x4,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC	= 0x8,
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS	= 0x10000,
};

D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND := cast(u32)0xffffffff;

D3D12_ROOT_CONSTANTS :: struct{
    ShaderRegister : windows.UINT,
    RegisterSpace : windows.UINT,
    Num32BitValues : windows.UINT,
};

D3D12_ROOT_DESCRIPTOR_FLAGS :: enum u32{
    D3D12_ROOT_DESCRIPTOR_FLAG_NONE	= 0,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE	= 0x2,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE	= 0x4,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC	= 0x8,
};

D3D12_ROOT_DESCRIPTOR1 :: struct{
    ShaderRegister : windows.UINT,
    RegisterSpace : windows.UINT,
    Flags : D3D12_ROOT_DESCRIPTOR_FLAGS,
};

ROOT_PARAMETER1_UNION :: struct #raw_union
{
    DescriptorTable : D3D12_ROOT_DESCRIPTOR_TABLE1,
    Constants : D3D12_ROOT_CONSTANTS,
    Descriptor : D3D12_ROOT_DESCRIPTOR1,
}

D3D12_ROOT_PARAMETER_TYPE ::  enum u32
{
    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE	= 0,
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS	= ( D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1 ) ,
    D3D12_ROOT_PARAMETER_TYPE_CBV	= ( D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1 ) ,
    D3D12_ROOT_PARAMETER_TYPE_SRV	= ( D3D12_ROOT_PARAMETER_TYPE_CBV + 1 ) ,
    D3D12_ROOT_PARAMETER_TYPE_UAV	= ( D3D12_ROOT_PARAMETER_TYPE_SRV + 1 ) ,
}

D3D12_SHADER_VISIBILITY :: enum u32
{
    D3D12_SHADER_VISIBILITY_ALL	= 0,
    D3D12_SHADER_VISIBILITY_VERTEX	= 1,
    D3D12_SHADER_VISIBILITY_HULL	= 2,
    D3D12_SHADER_VISIBILITY_DOMAIN	= 3,
    D3D12_SHADER_VISIBILITY_GEOMETRY	= 4,
    D3D12_SHADER_VISIBILITY_PIXEL	= 5,
    D3D12_SHADER_VISIBILITY_AMPLIFICATION	= 6,
    D3D12_SHADER_VISIBILITY_MESH = 7,
}

D3D12_ROOT_PARAMETER1 :: struct
{
    ParameterType : D3D12_ROOT_PARAMETER_TYPE,
    root_parameter1_union : ROOT_PARAMETER1_UNION,
    ShaderVisibility : D3D12_SHADER_VISIBILITY,
}

D3D12_DESCRIPTOR_RANGE1 :: struct
{
    RangeType  : D3D12_DESCRIPTOR_RANGE_TYPE,
    NumDescriptors : windows.UINT,
    BaseShaderRegister : windows.UINT,
    RegisterSpace : windows.UINT,
    Flags : D3D12_DESCRIPTOR_RANGE_FLAGS,
    OffsetInDescriptorsFromTableStart : windows.UINT,
}

D3D12_INPUT_ELEMENT_DESC :: struct
{
    SemanticName : cstring,//char* typedefed to LPCSTR
    SemanticIndex : c.uint,
    Format : DXGI_FORMAT,
    InputSlot : c.uint,
    AlignedByteOffset : c.uint,
    InputSlotClass : D3D12_INPUT_CLASSIFICATION,
    InstanceDataStepRate : c.uint,
}

D3D12_STATIC_BORDER_COLOR :: enum u32
{
    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK	= 0,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK	= ( D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1 ) ,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE	= ( D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK + 1 ) ,
}

D3D12_FILTER :: enum u32
{
    D3D12_FILTER_MIN_MAG_MIP_POINT	= 0,
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
    D3D12_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
    D3D12_FILTER_ANISOTROPIC	= 0x55,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
    D3D12_FILTER_COMPARISON_ANISOTROPIC	= 0xd5,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT	= 0x100,
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x101,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x104,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x105,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x110,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x111,
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x114,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR	= 0x115,
    D3D12_FILTER_MINIMUM_ANISOTROPIC	= 0x155,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT	= 0x180,
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x181,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x184,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x185,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x190,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x191,
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x194,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR	= 0x195,
    D3D12_FILTER_MAXIMUM_ANISOTROPIC	= 0x1d5,
}

D3D12_FILTER_TYPE :: enum u32
{
    D3D12_FILTER_TYPE_POINT	= 0,
    D3D12_FILTER_TYPE_LINEAR	= 1,
}

D3D12_FILTER_REDUCTION_TYPE :: enum u32
{
    D3D12_FILTER_REDUCTION_TYPE_STANDARD	= 0,
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON	= 1,
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM	= 2,
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM	= 3,
}

D3D12_TEXTURE_ADDRESS_MODE :: enum u32
{
    D3D12_TEXTURE_ADDRESS_MODE_WRAP	= 1,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR	= 2,
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP	= 3,
    D3D12_TEXTURE_ADDRESS_MODE_BORDER	= 4,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE	= 5,
}

D3D12_STATIC_SAMPLER_DESC :: struct
{
    Filter : D3D12_FILTER ,
    AddressU : D3D12_TEXTURE_ADDRESS_MODE ,
    AddressV : D3D12_TEXTURE_ADDRESS_MODE,
    AddressW : D3D12_TEXTURE_ADDRESS_MODE ,
    MipLODBias : f32 ,
    MaxAnisotropy : windows.UINT,
    ComparisonFunc : D3D12_COMPARISON_FUNC ,
    BorderColor : D3D12_STATIC_BORDER_COLOR ,
    MinLOD : f32 ,
    MaxLOD : f32 ,
    ShaderRegister : windows.UINT ,
    RegisterSpace : windows.UINT ,
    ShaderVisibility : D3D12_SHADER_VISIBILITY ,
}

//typedef D3D_PRIMITIVE_TOPOLOGY D3D12_PRIMITIVE_TOPOLOGY;
D3D12_PRIMITIVE_TOPOLOGY :: enum u32
{
    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED	= 0,
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST	= 1,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST	= 2,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP	= 3,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= 4,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= 5,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= 10,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= 11,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= 12,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= 13,
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= 33,
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= 34,
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= 35,
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= 36,
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= 37,
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= 38,
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= 39,
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= 40,
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= 41,
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= 42,
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= 43,
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= 44,
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= 45,
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= 46,
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= 47,
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= 48,
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= 49,
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= 50,
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= 51,
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= 52,
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= 53,
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= 54,
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= 55,
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= 56,
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= 57,
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= 58,
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= 59,
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= 60,
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= 61,
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= 62,
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= 63,
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= 64,
    D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
    D3D10_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
    D3D11_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
    D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
};

D3D12_PRIMITIVE_TOPOLOGY_TYPE :: enum u32
{
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED	= 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT	= 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE	= 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE	= 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH	= 4,
};

D3D12_INPUT_CLASSIFICATION :: enum u32
{
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA	= 0,
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA	= 1,
};

DXGI_SWAP_CHAIN_FLAG ::  enum u32
{
    DXGI_SWAP_CHAIN_FLAG_NONPREROTATED	= 1,
    DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH	= 2,
    DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE	= 4,
    DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT	= 8,
    DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER	= 16,
    DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY	= 32,
    DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT	= 64,
    DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER	= 128,
    DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO	= 256,
    DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO	= 512,
    DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED	= 1024,
    DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING	= 2048,
    DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS	= 4096,
}

DXGI_PRESENT_ALLOW_TEARING : u32 : 0x00000200;

DXGI_FORMAT :: enum u32
{
    DXGI_FORMAT_UNKNOWN	                    = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS       = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT          = 2,
    DXGI_FORMAT_R32G32B32A32_UINT           = 3,
    DXGI_FORMAT_R32G32B32A32_SINT           = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS          = 5,
    DXGI_FORMAT_R32G32B32_FLOAT             = 6,
    DXGI_FORMAT_R32G32B32_UINT              = 7,
    DXGI_FORMAT_R32G32B32_SINT              = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS       = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT          = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM          = 11,
    DXGI_FORMAT_R16G16B16A16_UINT           = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM          = 13,
    DXGI_FORMAT_R16G16B16A16_SINT           = 14,
    DXGI_FORMAT_R32G32_TYPELESS             = 15,
    DXGI_FORMAT_R32G32_FLOAT                = 16,
    DXGI_FORMAT_R32G32_UINT                 = 17,
    DXGI_FORMAT_R32G32_SINT                 = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS           = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT        = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS    = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT     = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS        = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM           = 24,
    DXGI_FORMAT_R10G10B10A2_UINT            = 25,
    DXGI_FORMAT_R11G11B10_FLOAT             = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS           = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM              = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB         = 29,
    DXGI_FORMAT_R8G8B8A8_UINT               = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM              = 31,
    DXGI_FORMAT_R8G8B8A8_SINT               = 32,
    DXGI_FORMAT_R16G16_TYPELESS             = 33,
    DXGI_FORMAT_R16G16_FLOAT                = 34,
    DXGI_FORMAT_R16G16_UNORM                = 35,
    DXGI_FORMAT_R16G16_UINT                 = 36,
    DXGI_FORMAT_R16G16_SNORM                = 37,
    DXGI_FORMAT_R16G16_SINT                 = 38,
    DXGI_FORMAT_R32_TYPELESS                = 39,
    DXGI_FORMAT_D32_FLOAT                   = 40,
    DXGI_FORMAT_R32_FLOAT                   = 41,
    DXGI_FORMAT_R32_UINT                    = 42,
    DXGI_FORMAT_R32_SINT                    = 43,
    DXGI_FORMAT_R24G8_TYPELESS              = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT           = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS       = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT        = 47,
    DXGI_FORMAT_R8G8_TYPELESS               = 48,
    DXGI_FORMAT_R8G8_UNORM                  = 49,
    DXGI_FORMAT_R8G8_UINT                   = 50,
    DXGI_FORMAT_R8G8_SNORM                  = 51,
    DXGI_FORMAT_R8G8_SINT                   = 52,
    DXGI_FORMAT_R16_TYPELESS                = 53,
    DXGI_FORMAT_R16_FLOAT                   = 54,
    DXGI_FORMAT_D16_UNORM                   = 55,
    DXGI_FORMAT_R16_UNORM                   = 56,
    DXGI_FORMAT_R16_UINT                    = 57,
    DXGI_FORMAT_R16_SNORM                   = 58,
    DXGI_FORMAT_R16_SINT                    = 59,
    DXGI_FORMAT_R8_TYPELESS                 = 60,
    DXGI_FORMAT_R8_UNORM                    = 61,
    DXGI_FORMAT_R8_UINT                     = 62,
    DXGI_FORMAT_R8_SNORM                    = 63,
    DXGI_FORMAT_R8_SINT                     = 64,
    DXGI_FORMAT_A8_UNORM                    = 65,
    DXGI_FORMAT_R1_UNORM                    = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP          = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM             = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM             = 69,
    DXGI_FORMAT_BC1_TYPELESS                = 70,
    DXGI_FORMAT_BC1_UNORM                   = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB              = 72,
    DXGI_FORMAT_BC2_TYPELESS                = 73,
    DXGI_FORMAT_BC2_UNORM                   = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB              = 75,
    DXGI_FORMAT_BC3_TYPELESS                = 76,
    DXGI_FORMAT_BC3_UNORM                   = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB              = 78,
    DXGI_FORMAT_BC4_TYPELESS                = 79,
    DXGI_FORMAT_BC4_UNORM                   = 80,
    DXGI_FORMAT_BC4_SNORM                   = 81,
    DXGI_FORMAT_BC5_TYPELESS                = 82,
    DXGI_FORMAT_BC5_UNORM                   = 83,
    DXGI_FORMAT_BC5_SNORM                   = 84,
    DXGI_FORMAT_B5G6R5_UNORM                = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM              = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM              = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM              = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM  = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS           = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB         = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS           = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB         = 93,
    DXGI_FORMAT_BC6H_TYPELESS               = 94,
    DXGI_FORMAT_BC6H_UF16                   = 95,
    DXGI_FORMAT_BC6H_SF16                   = 96,
    DXGI_FORMAT_BC7_TYPELESS                = 97,
    DXGI_FORMAT_BC7_UNORM                   = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB              = 99,
    DXGI_FORMAT_AYUV                        = 100,
    DXGI_FORMAT_Y410                        = 101,
    DXGI_FORMAT_Y416                        = 102,
    DXGI_FORMAT_NV12                        = 103,
    DXGI_FORMAT_P010                        = 104,
    DXGI_FORMAT_P016                        = 105,
    DXGI_FORMAT_420_OPAQUE                  = 106,
    DXGI_FORMAT_YUY2                        = 107,
    DXGI_FORMAT_Y210                        = 108,
    DXGI_FORMAT_Y216                        = 109,
    DXGI_FORMAT_NV11                        = 110,
    DXGI_FORMAT_AI44                        = 111,
    DXGI_FORMAT_IA44                        = 112,
    DXGI_FORMAT_P8                          = 113,
    DXGI_FORMAT_A8P8                        = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM              = 115,

    DXGI_FORMAT_P208                        = 130,
    DXGI_FORMAT_V208                        = 131,
    DXGI_FORMAT_V408                        = 132,


    DXGI_FORMAT_FORCE_UINT                  = 0xffffffff,
};

//Commands
CommandType :: enum u32
{
    CommandType_StartCommandList,
    CommandType_EndCommandList,
    CommandType_Draw,
    CommandType_DrawIndexed,
    CommandType_Viewport,
    CommandType_PipelineState,
    CommandType_RootSignature,
    CommandType_ScissorRect,
    CommandType_GraphicsRootDescTable,
    CommandType_GraphicsRootConstant,
    CommandType_SetVertexBuffer    ,
};

GPUMemoryResult :: struct
{
    Budget : u64,
    CurrentUsage : u64,
    AvailableForReservation : u64,
    CurrentReservation : u64,
};

D3D12_SHADER_BYTECODE :: struct
{
    pShaderBytecode : rawptr,
    //NOTE(Ray)://SIZE_T Can be found here in odin_lang https://github.com/odin-lang/Odin/blob/1eb1bffd89064add5828b3351289417ed28e332c/core/sys/windows/types.odin#L32
    BytecodeLength : uint,//typedef ULONG_PTR SIZE_T//unsigned __int3264 ULONG_PTR
};

D3D12_BUFFER_SRV_FLAGS ::  enum u32
{
    D3D12_BUFFER_SRV_FLAG_NONE	= 0,
    D3D12_BUFFER_SRV_FLAG_RAW	= 0x1,
};

D3D12_BUFFER_SRV :: struct 
{
    FirstElement : UINT64,
    NumElements : UINT,
    StructureByteStride : UINT,
    Flags : D3D12_BUFFER_SRV_FLAGS,
};

D3D12_TEX1D_SRV :: struct
{
    MostDetailedMip : UINT,
    MipLevels : UINT,
    ResourceMinLODClamp : FLOAT,
}

D3D12_TEX1D_ARRAY_SRV :: struct
{
    MostDetailedMip : UINT ,
    MipLevels : UINT ,
    FirstArraySlice : UINT ,
    ArraySize : UINT ,
    ResourceMinLODClamp : FLOAT ,
} 	

D3D12_TEX2D_SRV :: struct
{
    MostDetailedMip : UINT ,
    MipLevels : UINT ,
    PlaneSlice : UINT ,
    ResourceMinLODClamp : FLOAT ,
}

D3D12_TEX2D_ARRAY_SRV :: struct
{
    MostDetailedMip : UINT,
    MipLevels : UINT,
    FirstArraySlice : UINT,
    ArraySize :  UINT ,
    PlaneSlice : UINT ,
    ResourceMinLODClamp : FLOAT ,
} 	

D3D12_TEX3D_SRV :: struct
{
    MostDetailedMip : UINT ,
    MipLevels : UINT ,
    ResourceMinLODClamp : FLOAT ,
};

D3D12_TEXCUBE_SRV  :: struct
{
    MostDetailedMip : UINT ,
    MipLevels : UINT ,
    ResourceMinLODClamp : FLOAT ,
}

D3D12_TEXCUBE_ARRAY_SRV :: struct
{
    MostDetailedMip : UINT ,
    MipLevels : UINT ,
    First2DArrayFace : UINT ,
    NumCubes : UINT ,
    ResourceMinLODClamp : FLOAT ,
}

D3D12_TEX2DMS_SRV :: struct
{
    UnusedField_NothingToDefine : UINT ,
}

D3D12_TEX2DMS_ARRAY_SRV :: struct
{
    FirstArraySlice : UINT ,
    ArraySize : UINT ,
};

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV :: struct
{
    Location : D3D12_GPU_VIRTUAL_ADDRESS,
}

D3D12_SRV_DIMENSION :: enum u32
{
    D3D12_SRV_DIMENSION_UNKNOWN	= 0,
    D3D12_SRV_DIMENSION_BUFFER	= 1,
    D3D12_SRV_DIMENSION_TEXTURE1D	= 2,
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY	= 3,
    D3D12_SRV_DIMENSION_TEXTURE2D	= 4,
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY	= 5,
    D3D12_SRV_DIMENSION_TEXTURE2DMS	= 6,
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    D3D12_SRV_DIMENSION_TEXTURE3D	= 8,
    D3D12_SRV_DIMENSION_TEXTURECUBE	= 9,
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY	= 10,
    D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE	= 11,
};

Shader_Resource_Union :: struct #raw_union 
{
    Buffer : D3D12_BUFFER_SRV,
    Texture1D : D3D12_TEX1D_SRV,
    Texture1DArray  : D3D12_TEX1D_ARRAY_SRV,
    Texture2D : D3D12_TEX2D_SRV,
    Texture2DArray : D3D12_TEX2D_ARRAY_SRV,
    Texture2DMS : D3D12_TEX2DMS_SRV,
    Texture2DMSArray : D3D12_TEX2DMS_ARRAY_SRV,
    Texture3D : D3D12_TEX3D_SRV,
    TextureCube : D3D12_TEXCUBE_SRV ,
    TextureCubeArray : D3D12_TEXCUBE_ARRAY_SRV,
    RaytracingAccelerationStructure : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV,
};

D3D12_SHADER_COMPONENT_MAPPING_MASK ::  cast(UINT)0x7; 
D3D12_SHADER_COMPONENT_MAPPING_SHIFT ::  cast(UINT)3; 
D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES :: proc() ->  UINT
{
    return (1<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*4));
}

D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING :: proc(Src0,Src1,Src2,Src3 : UINT) -> UINT
{
    result := ((((Src0)&D3D12_SHADER_COMPONENT_MAPPING_MASK)| 
                (((Src1)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<D3D12_SHADER_COMPONENT_MAPPING_SHIFT)| 
                (((Src2)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*2))| 
                (((Src3)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*3))| 
		D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES()));
    return result;
}

D3D12_CONSTANT_BUFFER_VIEW_DESC :: struct
{
    BufferLocation : D3D12_GPU_VIRTUAL_ADDRESS,
    SizeInBytes : UINT,
};

D3D12_SHADER_RESOURCE_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT,
    ViewDimension : D3D12_SRV_DIMENSION,
    Shader4ComponentMapping : UINT,
    Buffer : Shader_Resource_Union,    
};

D3D12_PIPELINE_STATE_STREAM_DESC ::struct
{
    SizeInBytes : u64,//SIZE_T,
    pPipelineStateSubobjectStream : rawptr,//void*
};

D3D12_INPUT_LAYOUT_DESC ::struct
{
    input_element_desc : ^D3D12_INPUT_ELEMENT_DESC,
    NumElements : c.uint,
};

D3D12_PIPELINE_STATE_SUBOBJECT_TYPE :: enum u32
{
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE	= 0,

    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 + 1 ) ,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID	= ( D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING + 1 ) ,
};
/*
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE :: enum u32
{
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS,
  D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID
};
*/

PipelineStateSubObject :: struct(inner_type : typeid) #align align_of(rawptr)
{
    type : D3D12_PIPELINE_STATE_SUBOBJECT_TYPE,
    value : inner_type,
};

PipelineRasterizerStateSubObject :: struct #align align_of(rawptr)
{
    type : D3D12_PIPELINE_STATE_SUBOBJECT_TYPE,    
    value : D3D12_RASTERIZER_DESC,
};

PipelineRasterizerStateSubObjectTest :: struct #align align_of(rawptr)
{
    type : D3D12_PIPELINE_STATE_SUBOBJECT_TYPE,
    value : D3D12_RASTERIZER_DESC,    
};

PipelineStateStream :: struct 
{

    root_sig : PipelineStateSubObject(/*ID3D12RootSignature*/rawptr),
    input_layout : PipelineStateSubObject(D3D12_INPUT_LAYOUT_DESC),
    topology_type : PipelineStateSubObject(D3D12_PRIMITIVE_TOPOLOGY_TYPE),
    vertex_shader : PipelineStateSubObject(D3D12_SHADER_BYTECODE),
    fragment_shader : PipelineStateSubObject(D3D12_SHADER_BYTECODE),
    dsv_format : PipelineStateSubObject(DXGI_FORMAT),
    rtv_formats : PipelineStateSubObject(D3D12_RT_FORMAT_ARRAY),

    rasterizer_state : PipelineStateSubObject(D3D12_RASTERIZER_DESC),

    blend_state : PipelineStateSubObject(D3D12_BLEND_DESC),    
    depth_stencil_state : PipelineStateSubObject(D3D12_DEPTH_STENCIL_DESC1),                
};

D3D12_RT_FORMAT_ARRAY :: struct
{
    RTFormats : [8] DXGI_FORMAT,
    NumRenderTargets : windows.UINT,
};

D3D12_DEPTH_WRITE_MASK :: enum u32
{
    D3D12_DEPTH_WRITE_MASK_ZERO	= 0,
    D3D12_DEPTH_WRITE_MASK_ALL	= 1,
};


D3D12_COMPARISON_FUNC :: enum u32
    {
        D3D12_COMPARISON_FUNC_NEVER	= 1,
        D3D12_COMPARISON_FUNC_LESS	= 2,
        D3D12_COMPARISON_FUNC_EQUAL	= 3,
        D3D12_COMPARISON_FUNC_LESS_EQUAL	= 4,
        D3D12_COMPARISON_FUNC_GREATER	= 5,
        D3D12_COMPARISON_FUNC_NOT_EQUAL	= 6,
        D3D12_COMPARISON_FUNC_GREATER_EQUAL	= 7,
        D3D12_COMPARISON_FUNC_ALWAYS	= 8,
    };

DEFAULT_D3D12_STENCIL_READ_MASK :: 0xff;
DEFAULT_D3D12_STENCIL_WRITE_MASK :: 0xff;

D3D12_STENCIL_OP :: enum u32
    {
        D3D12_STENCIL_OP_KEEP	= 1,
        D3D12_STENCIL_OP_ZERO	= 2,
        D3D12_STENCIL_OP_REPLACE	= 3,
        D3D12_STENCIL_OP_INCR_SAT	= 4,
        D3D12_STENCIL_OP_DECR_SAT	= 5,
        D3D12_STENCIL_OP_INVERT	= 6,
        D3D12_STENCIL_OP_INCR	= 7,
        D3D12_STENCIL_OP_DECR	= 8,
    };

D3D12_DEPTH_STENCILOP_DESC :: struct
{
    StencilFailOp : D3D12_STENCIL_OP,
    StencilDepthFailOp : D3D12_STENCIL_OP,
    StencilPassOp : D3D12_STENCIL_OP,
    StencilFunc : D3D12_COMPARISON_FUNC,
};

DEFAULT_D3D12_DEPTH_STENCILOP_DESC :: D3D12_DEPTH_STENCILOP_DESC{
        .D3D12_STENCIL_OP_KEEP,
        .D3D12_STENCIL_OP_KEEP,
        .D3D12_STENCIL_OP_KEEP,
        .D3D12_COMPARISON_FUNC_ALWAYS};

D3D12_DEPTH_STENCIL_DESC :: struct
{
    DepthEnable : windows.BOOL,
    DepthWriteMask : D3D12_DEPTH_WRITE_MASK,
    DepthFunc : D3D12_COMPARISON_FUNC,     
    StencilEnable : windows.BOOL,
    StencilReadMask : u8,//UINT8 / char
    StencilWriteMask : u8,//UINT8 / char
    FrontFace : D3D12_DEPTH_STENCILOP_DESC,
    BackFace : D3D12_DEPTH_STENCILOP_DESC, 
};

D3D12_DEPTH_STENCIL_DESC1 :: struct
{
    DepthEnable : windows.BOOL,
    DepthWriteMask : D3D12_DEPTH_WRITE_MASK,
    DepthFunc : D3D12_COMPARISON_FUNC,     
    StencilEnable : windows.BOOL,
    StencilReadMask : u8,//UINT8 / char
    StencilWriteMask : u8,//UINT8 / char
    FrontFace : D3D12_DEPTH_STENCILOP_DESC,
    BackFace : D3D12_DEPTH_STENCILOP_DESC,
    DepthBoundsTestEnable : windows.BOOL,
};

DEFAULT_D3D12_DEPTH_STENCIL_DESC1 :: D3D12_DEPTH_STENCIL_DESC1{
    true,
    .D3D12_DEPTH_WRITE_MASK_ALL,
    .D3D12_COMPARISON_FUNC_LESS,
    false,
    DEFAULT_D3D12_STENCIL_READ_MASK,
    DEFAULT_D3D12_STENCIL_WRITE_MASK,
    DEFAULT_D3D12_DEPTH_STENCILOP_DESC,
    DEFAULT_D3D12_DEPTH_STENCILOP_DESC,
    false};

D3D12_FILL_MODE :: enum u32
{
    D3D12_FILL_MODE_WIREFRAME	= 2,
    D3D12_FILL_MODE_SOLID	= 3,
};

D3D12_CULL_MODE :: enum u32
{
    D3D12_CULL_MODE_NONE	= 1,
    D3D12_CULL_MODE_FRONT	= 2,
    D3D12_CULL_MODE_BACK	= 3,
};

D3D12_CONSERVATIVE_RASTERIZATION_MODE :: enum u32
{
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF	= 0,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON	= 1,
};

D3D12_RASTERIZER_DESC :: struct
{
    FillMode : D3D12_FILL_MODE,
    CullMode : D3D12_CULL_MODE,
    FrontCounterClockwise : windows.BOOL,
    DepthBias : c.int,
    DepthBiasClamp : f32,
    SlopeScaledDepthBias : f32,
    DepthClipEnable : windows.BOOL,
    MultisampleEnable : windows.BOOL,
    AntialiasedLineEnable : windows.BOOL,
    ForcedSampleCount : windows.UINT,
    ConservativeRaster : D3D12_CONSERVATIVE_RASTERIZATION_MODE,
};

DEFAULT_D3D12_RASTERIZER_DESC :: D3D12_RASTERIZER_DESC{ .D3D12_FILL_MODE_SOLID, .D3D12_CULL_MODE_BACK, false, 0, 0.0, 0.0, true, false, false, 0, .D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF};

D3D12_BLEND :: enum u32
{
    D3D12_BLEND_ZERO	= 1,
    D3D12_BLEND_ONE	= 2,
    D3D12_BLEND_SRC_COLOR	= 3,
    D3D12_BLEND_INV_SRC_COLOR	= 4,
    D3D12_BLEND_SRC_ALPHA	= 5,
    D3D12_BLEND_INV_SRC_ALPHA	= 6,
    D3D12_BLEND_DEST_ALPHA	= 7,
    D3D12_BLEND_INV_DEST_ALPHA	= 8,
    D3D12_BLEND_DEST_COLOR	= 9,
    D3D12_BLEND_INV_DEST_COLOR	= 10,
    D3D12_BLEND_SRC_ALPHA_SAT	= 11,
    D3D12_BLEND_BLEND_FACTOR	= 14,
    D3D12_BLEND_INV_BLEND_FACTOR	= 15,
    D3D12_BLEND_SRC1_COLOR	= 16,
    D3D12_BLEND_INV_SRC1_COLOR	= 17,
    D3D12_BLEND_SRC1_ALPHA	= 18,
    D3D12_BLEND_INV_SRC1_ALPHA	= 19,
};

D3D12_BLEND_OP :: enum u32
{
    D3D12_BLEND_OP_ADD	= 1,
    D3D12_BLEND_OP_SUBTRACT	= 2,
    D3D12_BLEND_OP_REV_SUBTRACT	= 3,
    D3D12_BLEND_OP_MIN	= 4,
    D3D12_BLEND_OP_MAX	= 5,
};

D3D12_LOGIC_OP :: enum u32
{
    D3D12_LOGIC_OP_CLEAR	= 0,
    D3D12_LOGIC_OP_SET	= ( D3D12_LOGIC_OP_CLEAR + 1 ) ,
    D3D12_LOGIC_OP_COPY	= ( D3D12_LOGIC_OP_SET + 1 ) ,
    D3D12_LOGIC_OP_COPY_INVERTED	= ( D3D12_LOGIC_OP_COPY + 1 ) ,
    D3D12_LOGIC_OP_NOOP	= ( D3D12_LOGIC_OP_COPY_INVERTED + 1 ) ,
    D3D12_LOGIC_OP_INVERT	= ( D3D12_LOGIC_OP_NOOP + 1 ) ,
    D3D12_LOGIC_OP_AND	= ( D3D12_LOGIC_OP_INVERT + 1 ) ,
    D3D12_LOGIC_OP_NAND	= ( D3D12_LOGIC_OP_AND + 1 ) ,
    D3D12_LOGIC_OP_OR	= ( D3D12_LOGIC_OP_NAND + 1 ) ,
    D3D12_LOGIC_OP_NOR	= ( D3D12_LOGIC_OP_OR + 1 ) ,
    D3D12_LOGIC_OP_XOR	= ( D3D12_LOGIC_OP_NOR + 1 ) ,
    D3D12_LOGIC_OP_EQUIV	= ( D3D12_LOGIC_OP_XOR + 1 ) ,
    D3D12_LOGIC_OP_AND_REVERSE	= ( D3D12_LOGIC_OP_EQUIV + 1 ) ,
    D3D12_LOGIC_OP_AND_INVERTED	= ( D3D12_LOGIC_OP_AND_REVERSE + 1 ) ,
    D3D12_LOGIC_OP_OR_REVERSE	= ( D3D12_LOGIC_OP_AND_INVERTED + 1 ) ,
    D3D12_LOGIC_OP_OR_INVERTED	= ( D3D12_LOGIC_OP_OR_REVERSE + 1 ) ,
};

D3D12_COLOR_WRITE_ENABLE :: enum u32
{
    D3D12_COLOR_WRITE_ENABLE_RED	= 1,
    D3D12_COLOR_WRITE_ENABLE_GREEN	= 2,
    D3D12_COLOR_WRITE_ENABLE_BLUE	= 4,
    D3D12_COLOR_WRITE_ENABLE_ALPHA	= 8,
    D3D12_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN )  | D3D12_COLOR_WRITE_ENABLE_BLUE )  | D3D12_COLOR_WRITE_ENABLE_ALPHA ) ,
}

D3D12_BUFFER_RTV :: struct
{
    FirstElement :     u64,
    NumElements :     windows.UINT,
}

D3D12_TEX1D_RTV :: struct
{
    MipSlice :     UINT,
}

D3D12_TEX1D_ARRAY_RTV :: struct
{
    MipSlice : windows.UINT,
    FirstArraySlice : windows.UINT,
    ArraySize : windows.UINT,
}

D3D12_TEX2D_RTV :: struct
{
    MipSlice : windows.UINT,
    PlaneSlice : windows.UINT,
}

D3D12_TEX2DMS_RTV :: struct
{
    UnusedField_NothingToDefine : windows.UINT,
}

D3D12_TEX2D_ARRAY_RTV :: struct
{
    MipSlice :     windows.UINT,
    FirstArraySlice : windows.UINT,
    ArraySize :     windows.UINT,
    PlaneSlice :     windows.UINT,
}

D3D12_TEX2DMS_ARRAY_RTV :: struct
{
    FirstArraySlice : windows.UINT,
    ArraySize :     windows.UINT, 
}

D3D12_TEX3D_RTV :: struct
{
    MipSlice : windows.UINT,
    FirstWSlice : windows.UINT ,
    WSize : windows.UINT,
}

D3D12_RTV_DIMENSION :: enum u32
{
    D3D12_RTV_DIMENSION_UNKNOWN	= 0,
    D3D12_RTV_DIMENSION_BUFFER	= 1,
    D3D12_RTV_DIMENSION_TEXTURE1D	= 2,
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
    D3D12_RTV_DIMENSION_TEXTURE2D	= 4,
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
    D3D12_RTV_DIMENSION_TEXTURE2DMS	= 6,
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    D3D12_RTV_DIMENSION_TEXTURE3D	= 8,
}

RenderTargetViewDescUnion :: struct #raw_union 
{
    Buffer : D3D12_BUFFER_RTV,
    Texture1D : D3D12_TEX1D_RTV,
    Texture1DArray : D3D12_TEX1D_ARRAY_RTV,
    Texture2D : D3D12_TEX2D_RTV,
    Texture2DArray : D3D12_TEX2D_ARRAY_RTV,
    Texture2DMS : D3D12_TEX2DMS_RTV,
    Texture2DMSArray : D3D12_TEX2DMS_ARRAY_RTV,
    Texture3D : D3D12_TEX3D_RTV,
}
 
D3D12_RENDER_TARGET_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT,
    ViewDimension : D3D12_RTV_DIMENSION,
    rtv_union : RenderTargetViewDescUnion,
}

D3D12_RENDER_TARGET_BLEND_DESC :: struct
{
    BlendEnable : windows.BOOL,
    LogicOpEnable : windows.BOOL,
    SrcBlend : D3D12_BLEND,
    DestBlend : D3D12_BLEND,
    BlendOp : D3D12_BLEND_OP,
    SrcBlendAlpha : D3D12_BLEND,
    DestBlendAlpha : D3D12_BLEND,
    BlendOpAlpha : D3D12_BLEND_OP,
    LogicOp : D3D12_LOGIC_OP,
    RenderTargetWriteMask : D3D12_COLOR_WRITE_ENABLE, //UINT8 // char;
}

DEFAULT_D3D12_RENDER_TARGET_BLEND_DESC :: D3D12_RENDER_TARGET_BLEND_DESC{false, false, .D3D12_BLEND_ONE, .D3D12_BLEND_ZERO, .D3D12_BLEND_OP_ADD, .D3D12_BLEND_ONE, .D3D12_BLEND_ZERO, .D3D12_BLEND_OP_ADD, .D3D12_LOGIC_OP_NOOP, .D3D12_COLOR_WRITE_ENABLE_ALL};

D3D12_BLEND_DESC :: struct
{
    AlphaToCoverageEnable : windows.BOOL,
    IndependentBlendEnable : windows.BOOL,
    RenderTarget : [8]D3D12_RENDER_TARGET_BLEND_DESC,
};

D3D12_VERTEX_BUFFER_VIEW :: struct
{
    BufferLocation : u64,//windows.UINT64,//D3D12_GPU_VIRTUAL_ADDRESS,
    SizeInBytes : windows.UINT,
    StrideInBytes : windows.UINT,
};

D3D12_INDEX_BUFFER_VIEW :: struct
{
    BufferLocation : u64,//windows.UINT64,    //D3D12_GPU_VIRTUAL_ADDRESS 
    SizeInBytes : windows.UINT,
    Format : DXGI_FORMAT, 
};

D3D12_DSV_FLAGS :: enum u32
{
    D3D12_DSV_FLAG_NONE	= 0,
    D3D12_DSV_FLAG_READ_ONLY_DEPTH	= 0x1,
    D3D12_DSV_FLAG_READ_ONLY_STENCIL	= 0x2,
};

/*
D3D12_DEPTH_STENCIL_VIEW_DESC : struct
    {
    DXGI_FORMAT Format;
    D3D12_DSV_DIMENSION ViewDimension;
    D3D12_DSV_FLAGS Flags;
    union 
        {
        D3D12_TEX1D_DSV Texture1D;
        D3D12_TEX1D_ARRAY_DSV Texture1DArray;
        D3D12_TEX2D_DSV Texture2D;
        D3D12_TEX2D_ARRAY_DSV Texture2DArray;
        D3D12_TEX2DMS_DSV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        } 	;
    } 	D3D12_DEPTH_STENCIL_VIEW_DESC;
*/

D3D12_CLEAR_FLAGS :: enum u32 
{
    D3D12_CLEAR_FLAG_DEPTH	= 0x1,
    D3D12_CLEAR_FLAG_STENCIL	= 0x2,
};

//DEFINE_ENUM U32_FLAG_OPERATORS( D3D12_CLEAR_FLAGS );
D3D12_FENCE_FLAGS :: enum u32
{
    D3D12_FENCE_FLAG_NONE	= 0,
    D3D12_FENCE_FLAG_SHARED	= 0x1,
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER	= 0x2,
    D3D12_FENCE_FLAG_NON_MONITORED	= 0x4,
};

//DEFINE_ENUM U32_FLAG_OPERATORS( D3D12_FENCE_FLAGS );

D3D12_DESCRIPTOR_HEAP_TYPE :: enum u32
{
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV	= 0,
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER	= ( D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1 ) ,
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV	= ( D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1 ) ,
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV	= ( D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1 ) ,
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES	= ( D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1 ) ,
};

D3D12_DESCRIPTOR_HEAP_FLAGS :: enum u32 
{
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE	= 0,
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE	= 0x1,
};

D3D12_DESCRIPTOR_HEAP_DESC :: struct
{
    Type : D3D12_DESCRIPTOR_HEAP_TYPE,
    NumDescriptors : windows.UINT,
    Flags : D3D12_DESCRIPTOR_HEAP_FLAGS,
    NodeMask : windows.UINT,
};

D3D12_GPU_DESCRIPTOR_HANDLE :: struct
{
    ptr : u64,
}

D3D12_CPU_DESCRIPTOR_HANDLE :: struct
{
    ptr : windows.SIZE_T,
}

ID3D12DescriptorHeap :: struct
{
    value : rawptr,
};

D3D12_RANGE :: struct
{
    Begin : windows.SIZE_T,
    End : windows.SIZE_T,
};

create_descriptor_heap :: proc(device : rawptr/*ID3D12Device2**/ ,desc : D3D12_DESCRIPTOR_HEAP_DESC) -> ID3D12DescriptorHeap
{
    result : ID3D12DescriptorHeap;
    l_desc := desc;
    result.value = CreateDescriptorHeap(device,l_desc.NumDescriptors,l_desc.Type,l_desc.Flags);        
    return result;
}

/*
create_descriptor_heap_type_num :: proc(device : rawptr/*ID3D12Device2**/ ,type : D3D12_DESCRIPTOR_HEAP_TYPE, num_of_descriptors : u32) -> ID3D12DescriptorHeap
{
    result : ID3D12DescriptorHeap;    
    desc : D3D12_DESCRIPTOR_HEAP_DESC;
    desc.NumDescriptors = num_of_descriptors;
    desc.Type = type;
    result.value = create_descriptor_heap(device,desc);//CreateDescriptorHeap(device,desc);    
    return result;
}
*/

D3D12_FORMAT_SUPPORT1 :: enum u32
{
    D3D12_FORMAT_SUPPORT1_NONE	= 0,
    D3D12_FORMAT_SUPPORT1_BUFFER	= 0x1,
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER	= 0x2,
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER	= 0x4,
    D3D12_FORMAT_SUPPORT1_SO_BUFFER	= 0x8,
    D3D12_FORMAT_SUPPORT1_TEXTURE1D	= 0x10,
    D3D12_FORMAT_SUPPORT1_TEXTURE2D	= 0x20,
    D3D12_FORMAT_SUPPORT1_TEXTURE3D	= 0x40,
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE	= 0x80,
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD	= 0x100,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE	= 0x200,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON	= 0x400,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT	= 0x800,
    D3D12_FORMAT_SUPPORT1_MIP	= 0x1000,
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET	= 0x4000,
    D3D12_FORMAT_SUPPORT1_BLENDABLE	= 0x8000,
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL	= 0x10000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE	= 0x40000,
    D3D12_FORMAT_SUPPORT1_DISPLAY	= 0x80000,
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT	= 0x100000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET	= 0x200000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD	= 0x400000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER	= 0x800000,
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST	= 0x1000000,
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW	= 0x2000000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON	= 0x4000000,
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT	= 0x8000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT	= 0x10000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT	= 0x20000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER	= 0x40000000,
}

D3D12_FORMAT_SUPPORT2 :: enum u32
{
    D3D12_FORMAT_SUPPORT2_NONE	= 0,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD	= 0x1,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS	= 0x2,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	= 0x4,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE	= 0x8,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX	= 0x10,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	= 0x20,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD	= 0x40,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE	= 0x80,
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP	= 0x100,
    D3D12_FORMAT_SUPPORT2_TILED	= 0x200,
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY	= 0x4000,
    D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK	= 0x8000,
}

D3D12_FEATURE_DATA_FORMAT_SUPPORT :: struct
{
    Format : DXGI_FORMAT,
    Support1 : D3D12_FORMAT_SUPPORT1,
    Support2 : D3D12_FORMAT_SUPPORT2,
};

D3D12_FEATURE :: enum u32
{
    D3D12_FEATURE_D3D12_OPTIONS	= 0,
    D3D12_FEATURE_ARCHITECTURE	= 1,
    D3D12_FEATURE_FEATURE_LEVELS	= 2,
    D3D12_FEATURE_FORMAT_SUPPORT	= 3,
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS	= 4,
    D3D12_FEATURE_FORMAT_INFO	= 5,
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT	= 6,
    D3D12_FEATURE_SHADER_MODEL	= 7,
    D3D12_FEATURE_D3D12_OPTIONS1	= 8,
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT	= 10,
    D3D12_FEATURE_ROOT_SIGNATURE	= 12,
    D3D12_FEATURE_ARCHITECTURE1	= 16,
    D3D12_FEATURE_D3D12_OPTIONS2	= 18,
    D3D12_FEATURE_SHADER_CACHE	= 19,
    D3D12_FEATURE_COMMAND_QUEUE_PRIORITY	= 20,
    D3D12_FEATURE_D3D12_OPTIONS3	= 21,
    D3D12_FEATURE_EXISTING_HEAPS	= 22,
    D3D12_FEATURE_D3D12_OPTIONS4	= 23,
    D3D12_FEATURE_SERIALIZATION	= 24,
    D3D12_FEATURE_CROSS_NODE	= 25,
    D3D12_FEATURE_D3D12_OPTIONS5	= 27,
    D3D12_FEATURE_DISPLAYABLE	= 28,
    D3D12_FEATURE_D3D12_OPTIONS6	= 30,
    D3D12_FEATURE_QUERY_META_COMMAND	= 31,
    D3D12_FEATURE_D3D12_OPTIONS7	= 32,
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT	= 33,
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES	= 34,
    D3D12_FEATURE_D3D12_OPTIONS8	= 36,
    D3D12_FEATURE_D3D12_OPTIONS9	= 37,
    D3D12_FEATURE_D3D12_OPTIONS10	= 39,
}

D3D_ROOT_SIGNATURE_VERSION :: enum u32
{
    D3D_ROOT_SIGNATURE_VERSION_1	= 0x1,
    D3D_ROOT_SIGNATURE_VERSION_1_0	= 0x1,
    D3D_ROOT_SIGNATURE_VERSION_1_1	= 0x2,
}

D3D12_FEATURE_DATA_ROOT_SIGNATURE :: struct
{
    HighestVersion : D3D_ROOT_SIGNATURE_VERSION,
}

D12Resource :: struct
{
    id : u32,
    state : rawptr,
    format_support : D3D12_FEATURE_DATA_FORMAT_SUPPORT,
    thread_id : u32,
    resource_state : D3D12_RESOURCE_STATES,
}

D3D12_HEAP_TYPE :: enum u32
{
    D3D12_HEAP_TYPE_DEFAULT	= 1,
    D3D12_HEAP_TYPE_UPLOAD	= 2,
    D3D12_HEAP_TYPE_READBACK	= 3,
    D3D12_HEAP_TYPE_CUSTOM	= 4,
}

D3D12_CPU_PAGE_PROPERTY :: enum u32
{
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN	= 0,
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE	= 1,
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE	= 2,
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK	= 3,
}

D3D12_MEMORY_POOL :: enum u32
{
    D3D12_MEMORY_POOL_UNKNOWN	= 0,
    D3D12_MEMORY_POOL_L0	= 1,
    D3D12_MEMORY_POOL_L1	= 2,
}

D3D12_HEAP_PROPERTIES :: struct
{
    Type : D3D12_HEAP_TYPE,
    CPUPageProperty : D3D12_CPU_PAGE_PROPERTY,
    MemoryPoolPreference : D3D12_MEMORY_POOL,
    CreationNodeMask : UINT,
    VisibleNodeMask : UINT,
}

D3D12_HEAP_FLAGS :: enum u32
{
    D3D12_HEAP_FLAG_NONE	= 0,
    D3D12_HEAP_FLAG_SHARED	= 0x1,
    D3D12_HEAP_FLAG_DENY_BUFFERS	= 0x4,
    D3D12_HEAP_FLAG_ALLOW_DISPLAY	= 0x8,
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER	= 0x20,
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES	= 0x40,
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES	= 0x80,
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED	= 0x100,
    D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH	= 0x200,
    D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS	= 0x400,
    D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT	= 0x800,
    D3D12_HEAP_FLAG_CREATE_NOT_ZEROED	= 0x1000,
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES	= 0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS	= 0xc0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES	= 0x44,
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES	= 0x84,
}

D3D12_RESOURCE_STATES :: enum u32
{
    D3D12_RESOURCE_STATE_COMMON	= 0,
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER	= 0x1,
    D3D12_RESOURCE_STATE_INDEX_BUFFER	= 0x2,
    D3D12_RESOURCE_STATE_RENDER_TARGET	= 0x4,
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS	= 0x8,
    D3D12_RESOURCE_STATE_DEPTH_WRITE	= 0x10,
    D3D12_RESOURCE_STATE_DEPTH_READ	= 0x20,
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE	= 0x40,
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE	= 0x80,
    D3D12_RESOURCE_STATE_STREAM_OUT	= 0x100,
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT	= 0x200,
    D3D12_RESOURCE_STATE_COPY_DEST	= 0x400,
    D3D12_RESOURCE_STATE_COPY_SOURCE	= 0x800,
    D3D12_RESOURCE_STATE_RESOLVE_DEST	= 0x1000,
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE	= 0x2000,
    D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE	= 0x400000,
    D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE	= 0x1000000,
    D3D12_RESOURCE_STATE_GENERIC_READ	= ( ( ( ( ( 0x1 | 0x2 )  | 0x40 )  | 0x80 )  | 0x200 )  | 0x800 ) ,
    D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE	= ( 0x40 | 0x80 ) ,
    D3D12_RESOURCE_STATE_PRESENT	= 0,
    D3D12_RESOURCE_STATE_PREDICATION	= 0x200,
    D3D12_RESOURCE_STATE_VIDEO_DECODE_READ	= 0x10000,
    D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE	= 0x20000,
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ	= 0x40000,
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE	= 0x80000,
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ	= 0x200000,
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE	= 0x800000,
};

DXGI_SAMPLE_DESC :: struct
{
    Count : windows.UINT,
    Quality  : windows.UINT,
}

D3D12_RESOURCE_DESC :: struct
{
    Dimension : D3D12_RESOURCE_DIMENSION,
    Alignment : UINT64,
    Width : UINT64 ,
    Height : windows.UINT,
    DepthOrArraySize : UINT16,
    MipLevels : UINT16,
    Format : DXGI_FORMAT,
    SampleDesc : DXGI_SAMPLE_DESC ,
    Layout : D3D12_TEXTURE_LAYOUT,
    Flags : D3D12_RESOURCE_FLAGS,
}

D3D12_RESOURCE_DIMENSION :: enum u32
{
    D3D12_RESOURCE_DIMENSION_UNKNOWN	= 0,
    D3D12_RESOURCE_DIMENSION_BUFFER	= 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE1D	= 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE2D	= 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE3D	= 4,
}

D3D12_TEXTURE_LAYOUT :: enum u32
{
    D3D12_TEXTURE_LAYOUT_UNKNOWN	= 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR	= 1,
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE	= 2,
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE	= 3,
}

D3D12_RESOURCE_FLAGS :: enum u32
{
    D3D12_RESOURCE_FLAG_NONE	= 0,
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET	= 0x1,
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL	= 0x2,
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS	= 0x4,
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE	= 0x8,
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER	= 0x10,
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS	= 0x20,
    D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY	= 0x40,
    D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY	= 0x80,
}

D3D12_DEPTH_STENCIL_VALUE :: struct
{
    Depth : FLOAT,
    Stencil : UINT8,
} 

ClearValueUnion :: struct #raw_union
{
    Color : [ 4 ]FLOAT,
    DepthStencil :    D3D12_DEPTH_STENCIL_VALUE,
}

D3D12_CLEAR_VALUE :: struct
{
    Format : DXGI_FORMAT,
    clear_value : ClearValueUnion,
}

D3D12_COMMAND_LIST_TYPE :: enum u32
{
    D3D12_COMMAND_LIST_TYPE_DIRECT	= 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE	= 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE	= 2,
    D3D12_COMMAND_LIST_TYPE_COPY	= 3,
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE	= 4,
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS	= 5,
    D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE	= 6,
}

DEPTH_STENCIL_UNION :: struct #raw_union 
{
    Texture1D : D3D12_TEX1D_DSV,
    Texture1DArray : D3D12_TEX1D_ARRAY_DSV,
    Texture2D : D3D12_TEX2D_DSV,
    Texture2DArray : D3D12_TEX2D_ARRAY_DSV,
    Texture2DMS : D3D12_TEX2DMS_DSV,
    Texture2DMSArray : D3D12_TEX2DMS_ARRAY_DSV,
}

D3D12_TEX1D_DSV :: struct
{
    MipSlice : windows.UINT,
}

D3D12_TEX1D_ARRAY_DSV :: struct
{
    MipSlice :     windows.UINT,
    FirstArraySlice : windows.UINT,
    ArraySize : windows.UINT,
}

D3D12_TEX2D_DSV :: struct
{
    MipSlice : windows.UINT,
}

D3D12_TEX2D_ARRAY_DSV :: struct
{
    MipSlice : windows.UINT,
    FirstArraySlice : windows.UINT,
    ArraySize : windows.UINT,
}

D3D12_TEX2DMS_DSV :: struct
{
    UnusedField_NothingToDefine : windows.UINT, 
} 

D3D12_TEX2DMS_ARRAY_DSV :: struct
{
    FirstArraySlice :     windows.UINT,
    ArraySize : windows.UINT,
}


D3D12_DSV_DIMENSION:: enum u32
{
    D3D12_DSV_DIMENSION_UNKNOWN	= 0,
    D3D12_DSV_DIMENSION_TEXTURE1D	= 1,
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
    D3D12_DSV_DIMENSION_TEXTURE2D	= 3,
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
    D3D12_DSV_DIMENSION_TEXTURE2DMS	= 5,
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6,
}

D3D12_DEPTH_STENCIL_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT,
    ViewDimension : D3D12_DSV_DIMENSION,
    Flags  : D3D12_DSV_FLAGS,
    depth_stencil : DEPTH_STENCIL_UNION, 
}

BufferView :: struct #raw_union
{
    vertex_buffer_view : D3D12_VERTEX_BUFFER_VIEW,
    index_buffer_view : D3D12_INDEX_BUFFER_VIEW,
};

UploadOp :: struct
{
    id : u64,
    thread_id : u64,
    arena : GPUArena,
    temp_arena : GPUArena,
};

UploadOpKey :: struct
{
    id : u64,
};

UploadOperations :: struct
{
    count : u64,
    table_cache : con.AnyCache(UploadOpKey,UploadOp),
    ticket_mutex : TicketMutex,
    current_op_id : u64,
    fence_value : u64,
    fence : rawptr,//ID3D12Fence;
    fence_event : windows.HANDLE,
};

GPUArena :: struct
{
    size : u64,
    heap : rawptr,//    ID3D12Heap* 
    resource : rawptr, //    ID3D12Resource* 
    slot : u32,
    buffer_view : BufferView,    
};

D12CommandAllocatorEntry :: struct
{
    allocator : rawptr, //ID3D12CommandAllocator* ;
    used_list_indexes : con.Buffer(u64),//Queued list indexes inflight being processed 
    index : u64,
    fence_value : u64,
    thread_id : u64,
    type : D3D12_COMMAND_LIST_TYPE,
    executed : bool,
}

//similar to MTLRenderCommandEncoder
D12CommandListEntry :: struct
{
    index : u64,
    list : rawptr,//^ID3D12GraphicsCommandList;
    encoding_thread_index : u64,
    is_encoding : bool,
    type : D3D12_COMMAND_LIST_TYPE,
    temp_resources : con.Buffer(rawptr),//ID3D12Object*//temp resources to release after execution is finished.
};
 
D12CommandAlloctorToCommandListKeyEntry :: struct
{
    command_allocator_index : u64,
    command_list_index : u64,
};

//Similar to a MTLCommandBuffer
D12CommandAllocatorKey :: struct
{
    ptr : u64,
    thread_id : u64,
};

D12CommandAllocatorTables :: struct
{
//    command_buffers : Buffer(),
//    free_command_buffers : Buffer,
    free_allocators : con.Buffer(D12CommandAllocatorEntry),
    command_lists : con.Buffer(D12CommandListEntry),
    allocator_to_list_table : con.Buffer(D12CommandAlloctorToCommandListKeyEntry),
    
    //One for each type 
    free_allocator_table_direct : con.Buffer(^D12CommandAllocatorEntry),
    free_allocator_table_compute : con.Buffer(^D12CommandAllocatorEntry),
    free_allocator_table_copy : con.Buffer(^D12CommandAllocatorEntry),

    temp_queue_command_list : con.Buffer(rawptr),    //ID3D12GraphicsCommandList*
    fl_ca : con.AnyCache(D12CommandAllocatorKey,D12CommandAllocatorEntry),//command_allocators
}

//create_descriptor_heap :: proc{create_descriptor_heap_,create_descriptor_heap_type_num};

D3D12_SUBRESOURCE_DATA :: struct
{
    pData : rawptr,
    RowPitch : int,//windows.LONG_PTR,
    SlicePitch : int,//windows.LONG_PTR,
}
